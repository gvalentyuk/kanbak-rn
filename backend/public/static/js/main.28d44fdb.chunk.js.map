{"version":3,"sources":["hooks/useAuth.tsx","context/AuthContext.ts","hooks/httpHook.tsx","tasks/kanban-board/task-element.styles.jsx","hooks/useTimer.jsx","tasks/kanban-board/TaskElement.tsx","tasks/kanban-board/task-column.styles.jsx","tasks/kanban-board/TaskColumn.tsx","tasks/kanban-board/task-list.styles.jsx","tasks/kanban-board/TasksList.tsx","user/components/login.styles.jsx","user/components/Login.tsx","user/components/Register.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["logoutTimer","AuthContext","createContext","isLogged","login","user","logout","name","email","tasks","token","useHttp","useState","isLoading","setIsLoading","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","headers","body","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","ElementContainer","styled","li","formatTime","timer","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","useTimer","initialState","setTimer","isActive","setIsActive","isPaused","setIsPaused","countRef","handleStart","setInterval","handlePause","clearInterval","spanValue","status","TaskElement","text","_id","cost","updateStatus","time","className","onClick","toFixed","evalStatus","ColumnContainer","TaskColumn","title","sendTask","showAddArea","setShowAddArea","newTaskContent","setNewTaskContent","submitTask","toLowerCase","props","map","task","value","onChange","e","target","ListContainer","ul","TasksList","auth","useContext","setTasks","id","process","BACKEND_URI","Authorization","JSON","stringify","list","fetchTasks","LoginContainer","form","FormControl","div","Login","setEmail","password","setPassword","onSubmit","preventDefault","type","to","Register","setName","App","routes","setIsLogged","tokenExpirationDate","setTokenExpirationDate","setUser","expirationDate","Date","getTime","localStorage","setItem","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","userData","parse","getItem","useAuth","path","exact","component","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qIAEIA,E,kECQSC,EAAcC,wBAAc,CACvCC,UAAU,EACVC,MAAO,SAACC,KACRC,OAAQ,aACRD,KAAM,CAAEE,KAAM,GAAIC,MAAO,GAAIC,MAAO,GAAIC,MAAO,M,sCCZpCC,EAAU,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACpBC,EADoB,KACTC,EADS,OAEDF,mBAAS,MAFR,mBAEpBG,EAFoB,KAEbC,EAFa,KAIrBC,EAAqBC,iBAAY,IAEjCC,EAAcC,sBAAW,uCAC7B,WAAOC,GAAP,qCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAsC,GAAIC,EAA1C,+BAAiD,KAC/CX,GAAa,GACPY,EAAgB,IAAIC,gBAC1BV,EAAmBW,QAAQC,KAAKH,GAHlC,kBAK2BI,MAAMT,EAAK,CAChCE,SACAC,UACAC,OACAM,OAAQL,EAAcK,SAT5B,cAKUC,EALV,iBAY+BA,EAASC,OAZxC,WAYUC,EAZV,OAcIjB,EAAmBW,QAAUX,EAAmBW,QAAQO,QACtD,SAACC,GAAD,OAAkBA,IAAYV,KAG3BM,EAASK,GAlBlB,uBAmBY,IAAIC,MAAMJ,EAAaK,SAnBnC,eAqBIzB,GAAa,GArBjB,kBAsBWoB,GAtBX,wCAwBIlB,EAAS,KAAEuB,SACXzB,GAAa,GAzBjB,+DAD6B,sDA8B7B,IAYF,OANA0B,qBAAU,WACR,OAAO,WACLvB,EAAmBW,QAAQa,SAAQ,SAACC,GAAD,OAAoBA,EAAUC,cAElE,IAEI,CAAE9B,YAAWE,QAAOI,cAAayB,WAVrB,WACjB5B,EAAS,S,gBCvCA6B,EAAmBC,IAAOC,GAAV,ulBCsBhBC,EAAa,SAACC,GACzB,IAAMC,EAAa,WAAID,EAAQ,IAAKE,OAAO,GACrCC,EAAO,UAAMC,KAAKC,MAAML,EAAQ,KAChCM,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAML,EAAQ,OAAQE,OAAO,GAEvD,MAAM,GAAN,OAAUK,EAAV,cAAwBD,EAAxB,cAAwCL,IAG3BO,EA/BE,WAAuB,IAAtBC,EAAqB,uDAAN,EAAM,EACX9C,mBAAS8C,GADE,mBAC9BT,EAD8B,KACvBU,EADuB,OAEL/C,oBAAS,GAFJ,mBAE9BgD,EAF8B,KAEpBC,EAFoB,OAGLjD,oBAAS,GAHJ,mBAG9BkD,EAH8B,KAGpBC,EAHoB,KAI/BC,EAAW9C,iBAAO,MAElB+C,EAAc,WAClBJ,GAAY,GACZE,GAAY,GACZC,EAASpC,QAAUsC,aAAY,WAC7BP,GAAS,SAACV,GAAD,OAAWA,EAAQ,OAC3B,MAGCkB,EAAc,WAClBC,cAAcJ,EAASpC,SACvBmC,GAAY,IAGd,MAAO,CAAEd,QAAOW,WAAUE,WAAUG,cAAaE,gB,OCjB7CE,EAAY,SAACC,GACjB,MAAkB,SAAXA,EAAoB,QAAqB,aAAXA,EAAwB,UAAY,MAwD5DC,EApC6B,SAAC,GAOtC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,IACAH,EAII,EAJJA,OACAI,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,KACI,EACwCnB,EAC/B,aAAXa,EAAwBM,EAAO,GADzB3B,EADJ,EACIA,MAAOgB,EADX,EACWA,YAAaE,EADxB,EACwBA,YAY5B,OANA3B,qBAAU,WAER,OADAyB,IACO,WACLE,OAED,CAACF,EAAaE,IAEf,eAACtB,EAAD,WACG2B,EACD,sBAAKK,UAAU,UAAf,UACc,SAAXP,GAAqBI,GACpB,uBAAMI,QAASb,EAAf,eAA+BS,EAAKK,QAAQ,MAElC,aAAXT,GACC,sBAAMQ,QAASb,EAAf,SAA6BjB,EAAWC,KAE1C,sBAAM6B,QAnBU,WACpBH,EA7Be,SAACL,GAClB,MAAkB,SAAXA,EACH,WAEA,OAyBWU,CAAWV,GAASG,EAAKxB,IAkBlC,SAA+BoB,EAAUC,YCrDpCW,EAAkBnC,IAAOC,GAAV,khFC+EbmC,EA9D2B,SAAC,GAKpC,IAJLzE,EAII,EAJJA,MACA0E,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAT,EACI,EADJA,aACI,EACkC/D,oBAAS,GAD3C,mBACGyE,EADH,KACgBC,EADhB,OAEwC1E,mBAAS,IAFjD,mBAEG2E,EAFH,KAEmBC,EAFnB,KAIEC,EAAU,uCAAG,sBAAAnE,EAAA,sDACjBgE,GAAe,GACXC,GACFH,EAAS,CAAEZ,KAAMe,EAAgBjB,OAAQa,EAAMO,gBAHhC,2CAAH,qDAOhB,OACE,eAACT,EAAD,CAAiBU,MAAOR,EAAxB,UACE,sBAAMN,UAAU,SAAhB,SACE,6BAAKM,MAEP,qBAAKN,UAAU,gBAAf,SACE,oBAAIA,UAAU,YAAd,SACGpE,EAAMmF,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CACElB,aAAcA,EAEdH,KAAMqB,EAAKrB,KACXC,IAAKoB,EAAKpB,IACVH,OAAQuB,EAAKvB,OACbM,KAAMiB,EAAKjB,KACXF,KAAMmB,EAAKnB,MALNmB,EAAKpB,YAUlB,sBAAKI,UAAU,gBAAf,WACIQ,GACA,sBAAKR,UAAU,UAAUC,QAAS,kBAAMQ,GAAe,IAAvD,UACE,sBAAMT,UAAU,YAAhB,eACA,+CAGHQ,GACC,qBAAKR,UAAU,UAAf,SACE,sBAAMC,QAASW,EAAf,4BAILJ,GACC,qBAAKR,UAAU,gBAAf,SACE,0BACEiB,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAAkBQ,EAAEC,OAAOH,QAC5CjB,UAAU,mBCvETqB,EAAgBpD,IAAOqD,GAAV,wPCgFXC,EA1Ea,WAC1B,IAAMC,EAAOC,qBAAWrG,GADQ,EAENW,mBAAiB,IAFX,mBAEzBH,EAFyB,KAElB8F,EAFkB,KAGxBpF,EAAgBR,IAAhBQ,YAEFwD,EAAY,uCAAG,WAAOL,EAAgBkC,GAAvB,6BAAAlF,EAAA,6DAAmCsD,EAAnC,+BAAkD,EAAlD,kBAEUzD,EAAY,GAAD,OACjCsF,mIAAYC,YADqB,UAEpC,MACA,CACEC,cAAc,UAAD,OAAYN,EAAKhG,KAAKK,OACnC,eAAgB,oBAElBkG,KAAKC,UAAU,CAAEvC,SAAQkC,KAAI5B,UATd,OAEX1C,EAFW,OAWjBqE,EAASrE,EAAa4E,MAXL,yGAAH,wDAeZ1B,EAAQ,uCAAG,WAAOS,GAAP,eAAAvE,EAAA,+EAEcH,EAAY,GAAD,OACjCsF,mIAAYC,YADqB,UAEpC,OACA,CACEC,cAAc,UAAD,OAAYN,EAAKhG,KAAKK,OACnC,eAAgB,oBAElBkG,KAAKC,UAAUhB,IATJ,OAEP3D,EAFO,OAWbqE,EAASrE,EAAa4E,MAXT,uGAAH,sDA8Bd,OAfAtE,qBAAU,YACQ,uCAAG,4BAAAlB,EAAA,+EAEYH,EAAY,GAAD,OACjCsF,mIAAYC,YADqB,UAEpC,MACA,CAAEC,cAAc,UAAD,OAAYN,EAAKhG,KAAKK,SALxB,OAETwB,EAFS,OAOfqE,EAASrE,EAAa4E,MAPP,uGAAH,qDAWhBC,KACC,CAAC5F,EAAakF,EAAKhG,KAAKK,QAGzB,eAACwF,EAAD,WACE,cAAC,EAAD,CACEvB,aAAcA,EACdS,SAAUA,EACVD,MAAO,OACP1E,MAAOA,EAAM0B,QAAO,SAAC0D,GAAD,MAAgC,SAAhBA,EAAKvB,YAE3C,cAAC,EAAD,CACEK,aAAcA,EACdS,SAAUA,EACVD,MAAO,WACP1E,MAAOA,EAAM0B,QAAO,SAAC0D,GAAD,MAAgC,aAAhBA,EAAKvB,YAE3C,cAAC,EAAD,CACEK,aAAcA,EACdS,SAAUA,EACVD,MAAO,OACP1E,MAAOA,EAAM0B,QAAO,SAAC0D,GAAD,MAAgC,SAAhBA,EAAKvB,gBC1EpC0C,EAAiBlE,IAAOmE,KAAV,8gCAsDdC,EAAcpE,IAAOqE,IAAV,sXCTTC,EAzCS,WACtB,IAAMf,EAAOC,qBAAWrG,GADI,EAEOU,IAA3BE,EAFoB,EAEpBA,UAAWM,EAFS,EAETA,YAFS,EAGFP,mBAAS,IAHP,mBAGrBJ,EAHqB,KAGd6G,EAHc,OAIIzG,mBAAS,IAJb,mBAIrB0G,EAJqB,KAIXC,EAJW,KAMtBC,EAAQ,uCAAG,WAAOxB,GAAP,eAAA1E,EAAA,6DACf0E,EAAEyB,iBADa,kBAGctG,EAAY,GAAD,OACjCsF,mIAAYC,YADqB,eAEpC,OACA,CACE,eAAgB,oBAElBE,KAAKC,UAAU,CACbrG,QACA8G,cAXS,OAGPpF,EAHO,OAcbmE,EAAKjG,MAAM8B,GAdE,yGAAH,sDAkBd,OACE,eAAC8E,EAAD,CAAgBQ,SAAUA,EAA1B,UACE,uCACA,eAACN,EAAD,WACE,0CACA,uBAAOQ,KAAK,OAAO3B,SAAU,SAACC,GAAD,OAAOqB,EAASrB,EAAEC,OAAOH,aAExD,eAACoB,EAAD,WACE,6CACA,uBAAOQ,KAAK,WAAW3B,SAAU,SAACC,GAAD,OAAOuB,EAAYvB,EAAEC,OAAOH,aAE/D,cAAC,IAAD,CAAM6B,GAAI,YAAV,qCACC9G,EAAY,wCAAiB,+CCYrB+G,EAhDY,WACzB,IAAMvB,EAAOC,qBAAWrG,GADO,EAEWU,IAAlCE,EAFuB,EAEvBA,UAAWE,EAFY,EAEZA,MAAOI,EAFK,EAELA,YAFK,EAGLP,mBAAS,IAHJ,mBAGxBJ,EAHwB,KAGjB6G,EAHiB,OAICzG,mBAAS,IAJV,mBAIxB0G,EAJwB,KAIdC,EAJc,OAKP3G,mBAAS,IALF,mBAKxBL,EALwB,KAKlBsH,EALkB,KAOzBL,EAAQ,uCAAG,WAAOxB,GAAP,eAAA1E,EAAA,6DACf0E,EAAEyB,iBADa,kBAGctG,EAAY,GAAD,OACjCsF,mIAAYC,YADqB,sBAEpC,OACA,CACE,eAAgB,oBAElBE,KAAKC,UAAU,CACbrG,QACA8G,WACA/G,UAZS,OAGP2B,EAHO,OAebmE,EAAKjG,MAAM8B,GAfE,yGAAH,sDAmBd,OACE,eAAC8E,EAAD,CAAgBQ,SAAUA,EAA1B,UACE,8CACA,eAACN,EAAD,WACE,0CACA,uBAAOQ,KAAK,OAAO3B,SAAU,SAACC,GAAD,OAAOqB,EAASrB,EAAEC,OAAOH,aAExD,eAACoB,EAAD,WACE,yCACA,uBAAOQ,KAAK,OAAO3B,SAAU,SAACC,GAAD,OAAO6B,EAAQ7B,EAAEC,OAAOH,aAEvD,eAACoB,EAAD,WACE,6CACA,uBAAOQ,KAAK,WAAW3B,SAAU,SAACC,GAAD,OAAOuB,EAAYvB,EAAEC,OAAOH,aAE/D,cAAC,IAAD,CAAM6B,GAAI,QAAV,uCACC5G,GAAS,4BAAIA,IACbF,EAAY,wCAAiB,sDCTrBiH,EA3BO,WAAO,IAEvBC,EAFsB,EbTL,WAAO,IAAD,EACKnH,oBAAS,GADd,mBACpBT,EADoB,KACV6H,EADU,OAE2BpH,qBAF3B,mBAEpBqH,EAFoB,KAECC,EAFD,OAGHtH,mBAAS,CAC/BL,KAAM,GACNG,MAAO,GACP8F,GAAI,GACJhG,MAAO,GACPC,MAAO,KARkB,mBAGpBJ,EAHoB,KAGd8H,EAHc,KAWrB/H,EAAQgB,uBAAY,SAACf,EAAM+H,GAC/BJ,GAAY,GACZG,EAAQ9H,GACR,IAAM4H,EACJG,GAAkB,IAAIC,MAAK,IAAIA,MAAOC,UAAY,MACpDJ,EAAuBD,GACvBM,aAAaC,QACX,WACA5B,KAAKC,UAAL,2BAAoBxG,GAApB,IAA0BoI,WAAYR,EAAoBS,oBAE3D,IAEGpI,EAASc,uBAAY,WACzB4G,GAAY,GACZE,EAAuB,MACvBC,EAAQ,CAAE5H,KAAM,GAAIG,MAAO,GAAI8F,GAAI,GAAIhG,MAAO,GAAIC,MAAO,KACzD8H,aAAaI,WAAW,cACvB,IAuBH,OArBAnG,qBAAU,WACR,GAAInC,EAAKK,OAASuH,EAAqB,CACrC,IAAMW,EACJX,EAAoBK,WAAY,IAAID,MAAOC,UAC7CtI,EAAc6I,WAAWvI,EAAQsI,QAEjCE,aAAa9I,KAEd,CAACM,EAAQD,EAAKK,MAAOuH,IAExBzF,qBAAU,WACR,IAAMuG,EAAWnC,KAAKoC,MAAMT,aAAaU,QAAQ,aAAe,MAE9DF,GACAA,EAASrI,OACT,IAAI2H,KAAKU,EAASN,YAAc,IAAIJ,MAEpCjI,EAAM2I,EAAU,IAAIV,KAAKU,EAASN,eAEnC,CAACrI,IAEG,CAAED,WAAUC,QAAOE,SAAQD,QazCQ6I,GAAlC/I,EADkB,EAClBA,SAAUC,EADQ,EACRA,MAAOE,EADC,EACDA,OAAQD,EADP,EACOA,KAmBjC,OAhBE0H,EADE5H,EAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgJ,KAAM,IAAKC,OAAO,EAAMC,UAAWjD,IAC1C,cAAC,IAAD,CAAUuB,GAAI,SAKhB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwB,KAAM,SAAUE,UAAWjC,IAClC,cAAC,IAAD,CAAO+B,KAAM,YAAaE,UAAWzB,IACrC,cAAC,IAAD,CAAUD,GAAI,cAMlB,cAAC1H,EAAYqJ,SAAb,CAAsBxD,MAAO,CAAE3F,WAAUC,QAAOE,SAAQD,QAAxD,SACE,cAAC,IAAD,UAAS0H,OCrBAwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28d44fdb.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\r\n\r\nlet logoutTimer: any;\r\n\r\nexport const useAuth = () => {\r\n  const [isLogged, setIsLogged] = useState(false);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState<Date | null>();\r\n  const [user, setUser] = useState({\r\n    name: \"\",\r\n    token: \"\",\r\n    id: \"\",\r\n    email: \"\",\r\n    tasks: [],\r\n  });\r\n\r\n  const login = useCallback((user, expirationDate?) => {\r\n    setIsLogged(true);\r\n    setUser(user);\r\n    const tokenExpirationDate =\r\n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n    setTokenExpirationDate(tokenExpirationDate);\r\n    localStorage.setItem(\r\n      \"userData\",\r\n      JSON.stringify({ ...user, expiration: tokenExpirationDate.toISOString() })\r\n    );\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setIsLogged(false);\r\n    setTokenExpirationDate(null);\r\n    setUser({ name: \"\", token: \"\", id: \"\", email: \"\", tasks: [] });\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (user.token && tokenExpirationDate) {\r\n      const remainingTime =\r\n        tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [logout, user.token, tokenExpirationDate]);\r\n\r\n  useEffect(() => {\r\n    const userData = JSON.parse(localStorage.getItem(\"userData\") || \"{}\");\r\n    if (\r\n      userData &&\r\n      userData.token &&\r\n      new Date(userData.expiration) > new Date()\r\n    ) {\r\n      login(userData, new Date(userData.expiration));\r\n    }\r\n  }, [login]);\r\n\r\n  return { isLogged, login, logout, user };\r\n};\r\n","import { createContext } from \"react\";\r\n\r\ntype User = {\r\n  name: string;\r\n  email: string;\r\n  tasks: any[];\r\n  token: string;\r\n  id: string;\r\n};\r\n\r\nexport const AuthContext = createContext({\r\n  isLogged: false,\r\n  login: (user: User) => {},\r\n  logout: () => {},\r\n  user: { name: \"\", email: \"\", tasks: [], token: \"\" },\r\n});\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const activeHttpRequests = useRef<any>([]);\r\n\r\n  const sendRequest = useCallback(\r\n    async (url, method = \"GET\", headers = {}, body = null) => {\r\n      setIsLoading(true);\r\n      const httpAbortCtrl = new AbortController();\r\n      activeHttpRequests.current.push(httpAbortCtrl);\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          headers,\r\n          body,\r\n          signal: httpAbortCtrl.signal,\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        activeHttpRequests.current = activeHttpRequests.current.filter(\r\n          (reqCtrl: any) => reqCtrl !== httpAbortCtrl\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n        setIsLoading(false);\r\n        return responseData;\r\n      } catch (e) {\r\n        setError(e.message);\r\n        setIsLoading(false);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      activeHttpRequests.current.forEach((abortCtrl: any) => abortCtrl.abort());\r\n    };\r\n  }, []);\r\n\r\n  return { isLoading, error, sendRequest, clearError };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ElementContainer = styled.li`\r\n  margin: 10px;\r\n  padding: 10px;\r\n  height: fit-content;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  border-radius: 10px;\r\n  line-height: 1.5rem;\r\n  letter-spacing: 1px;\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    background-color: white;\r\n    color: black;\r\n  }\r\n\r\n  & span {\r\n    height: 100%;\r\n    background-color: red;\r\n    border-radius: 0.2rem;\r\n    font-size: 0.8rem;\r\n    padding: 2px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .options {\r\n    span:last-of-type {\r\n      margin-left: 0.8rem;\r\n    }\r\n  }\r\n`;\r\n","import { useState, useRef } from \"react\";\r\n\r\nconst useTimer = (initialState = 0) => {\r\n  const [timer, setTimer] = useState(initialState);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const countRef = useRef(null);\r\n\r\n  const handleStart = () => {\r\n    setIsActive(true);\r\n    setIsPaused(true);\r\n    countRef.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1);\r\n    }, 1000);\r\n  };\r\n\r\n  const handlePause = () => {\r\n    clearInterval(countRef.current);\r\n    setIsPaused(false);\r\n  };\r\n\r\n  return { timer, isActive, isPaused, handleStart, handlePause };\r\n};\r\n\r\nexport const formatTime = (timer) => {\r\n  const getSeconds = `0${timer % 60}`.slice(-2);\r\n  const minutes = `${Math.floor(timer / 60)}`;\r\n  const getMinutes = `0${minutes % 60}`.slice(-2);\r\n  const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\r\n\r\n  return `${getHours} : ${getMinutes} : ${getSeconds}`;\r\n};\r\n\r\nexport default useTimer;\r\n","import { useEffect } from \"react\";\r\nimport { ElementContainer } from \"./task-element.styles\";\r\nimport useTimer, { formatTime } from \"../../hooks/useTimer\";\r\n\r\nconst spanValue = (status: string): string | null => {\r\n  return status === \"todo\" ? \"Start\" : status === \"progress\" ? \"Resolve\" : null;\r\n};\r\n\r\nconst evalStatus = (status: string): string => {\r\n  return status === \"todo\"\r\n    ? \"progress\"\r\n    : status === \"progress\"\r\n    ? \"done\"\r\n    : \"done\";\r\n};\r\n\r\ntype ElementProps = {\r\n  text: string;\r\n  _id: string;\r\n  status: string;\r\n  time: number;\r\n  cost: number;\r\n  updateStatus: (status: string, id: string, time: number) => Promise<void>;\r\n};\r\n\r\nconst TaskElement: React.FC<ElementProps> = ({\r\n  text,\r\n  _id,\r\n  status,\r\n  cost,\r\n  updateStatus,\r\n  time,\r\n}) => {\r\n  const { timer, handleStart, handlePause } = useTimer(\r\n    status === \"progress\" ? time : 0\r\n  );\r\n  const updateHandler = () => {\r\n    updateStatus(evalStatus(status), _id, timer);\r\n  };\r\n  useEffect(() => {\r\n    handleStart();\r\n    return () => {\r\n      handlePause();\r\n    };\r\n  }, [handleStart, handlePause]);\r\n  return (\r\n    <ElementContainer>\r\n      {text}\r\n      <div className=\"options\">\r\n        {status === \"done\" && cost && (\r\n          <span onClick={handleStart}> ${cost.toFixed(2)}</span>\r\n        )}\r\n        {status === \"progress\" && (\r\n          <span onClick={handleStart}>{formatTime(timer)}</span>\r\n        )}\r\n        <span onClick={updateHandler}>{spanValue(status)}</span>\r\n      </div>\r\n    </ElementContainer>\r\n  );\r\n};\r\n\r\nexport default TaskElement;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ColumnContainer = styled.li`\r\n  flex: 1;\r\n  width: 25%;\r\n  margin: 2rem 0.5rem;\r\n  position: relative;\r\n  background-color: rgba(0, 0, 0, 0.4);\r\n  border-radius: 10px;\r\n  overflow-x: hidden;\r\n  font-family: Quicksand, sans-serif;\r\n  background-color: #248224;\r\n\r\n  @media screen and (max-width: 900px) {\r\n    width: 95%;\r\n  }\r\n\r\n  .custom-scroll {\r\n    overflow-y: auto;\r\n    max-height: 75vh;\r\n  }\r\n\r\n  .custom-scroll::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.4);\r\n    border-radius: 10px;\r\n    background-color: rgba(255, 255, 255, 0.3);\r\n    margin-right: 5px;\r\n  }\r\n\r\n  .custom-scroll::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n\r\n  .custom-scroll::-webkit-scrollbar-thumb {\r\n    border-radius: 10px;\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n  }\r\n\r\n  .header {\r\n    display: flex;\r\n    justify-content: center;\r\n    border-radius: 10px;\r\n    margin: 10px;\r\n    height: 3.5rem;\r\n    align-items: center;\r\n  }\r\n\r\n  .header h1 {\r\n    font-size: 1.25rem;\r\n    font-weight: 600;\r\n    color: white;\r\n    letter-spacing: 2px;\r\n    text-shadow: 2px 2px 5px black;\r\n  }\r\n\r\n  .item-list {\r\n    padding: 0;\r\n    list-style-type: none;\r\n    min-height: 50px;\r\n  }\r\n\r\n\r\n\r\n  .add-btn-group {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .add-btn {\r\n    margin: 10px;\r\n    padding: 5px 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    width: fit-content;\r\n    border-radius: 5px;\r\n    transition: all 0.3s ease-in;\r\n    user-select: none;\r\n    color: white;\r\n  }\r\n\r\n  .add-btn:hover {\r\n    background-color: rgba(255, 255, 255, 0.9);\r\n    color: black;\r\n  }\r\n\r\n  .add-btn:active {\r\n    transform: scale(0.97);\r\n  }\r\n\r\n  .solid {\r\n    display: flex;\r\n  }\r\n\r\n  .solid:hover {\r\n    transition: unset;\r\n    filter: brightness(95%);\r\n    color: white;\r\n  }\r\n\r\n  .plus-sign {\r\n    font-size: 1.5rem;\r\n    margin-right: 5px;\r\n    position: relative;\r\n    top: -3px;\r\n  }\r\n\r\n  .add-container {\r\n    margin: 10px;\r\n    padding: 5px 5px;\r\n    border-radius: 10px;\r\n    background-color: rgba(255, 255, 255, 0.9);\r\n    min-height: 100px;\r\n    \r\n    textarea {\r\n        width: 94%\r\n    }\r\n  }\r\n\r\n  .add-item {\r\n    width: 100%;\r\n    min-height: 100px;\r\n    height: auto;\r\n    background-color: white;\r\n    border-radius: 10px;\r\n    margin: 5px auto;\r\n    resize: none;\r\n    color: black;\r\n    padding: 10px;\r\n  }\r\n\r\n  .add-item:focus {\r\n    outline: none;\r\n  }\r\n\r\n  @media screen and (max-width: 1800px) {\r\n    .main-title {\r\n      font-size: 2rem;\r\n    }\r\n  }\r\n\r\n`;\r\n","import { useState } from \"react\";\r\nimport TaskElement from \"./TaskElement\";\r\nimport { ColumnContainer } from \"./task-column.styles\";\r\n\r\nexport type Task = {\r\n  text: string;\r\n  status: string;\r\n  _id: string;\r\n  time: number;\r\n  cost: number;\r\n};\r\n\r\ntype ColumnProps = {\r\n  tasks: Task[];\r\n  title: string;\r\n  sendTask: (task: { text: string; status: string }) => Promise<void>;\r\n  updateStatus: (status: string, id: string, time: number) => Promise<void>;\r\n};\r\n\r\nconst TaskColumn: React.FC<ColumnProps> = ({\r\n  tasks,\r\n  title,\r\n  sendTask,\r\n  updateStatus,\r\n}) => {\r\n  const [showAddArea, setShowAddArea] = useState(false);\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const submitTask = async () => {\r\n    setShowAddArea(false);\r\n    if (newTaskContent) {\r\n      sendTask({ text: newTaskContent, status: title.toLowerCase() });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ColumnContainer props={title}>\r\n      <span className=\"header\">\r\n        <h1>{title}</h1>\r\n      </span>\r\n      <div className=\"custom-scroll\">\r\n        <ul className=\"item-list\">\r\n          {tasks.map((task) => (\r\n            <TaskElement\r\n              updateStatus={updateStatus}\r\n              key={task._id}\r\n              text={task.text}\r\n              _id={task._id}\r\n              status={task.status}\r\n              time={task.time}\r\n              cost={task.cost}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"add-btn-group\">\r\n        {!showAddArea && (\r\n          <div className=\"add-btn\" onClick={() => setShowAddArea(true)}>\r\n            <span className=\"plus-sign\">+</span>\r\n            <span>Add item</span>\r\n          </div>\r\n        )}\r\n        {showAddArea && (\r\n          <div className=\"add-btn\">\r\n            <span onClick={submitTask}>Save Item</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {showAddArea && (\r\n        <div className=\"add-container\">\r\n          <textarea\r\n            value={newTaskContent}\r\n            onChange={(e) => setNewTaskContent(e.target.value)}\r\n            className=\"add-item\"\r\n          />\r\n        </div>\r\n      )}\r\n    </ColumnContainer>\r\n  );\r\n};\r\n\r\nexport default TaskColumn;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ListContainer = styled.ul`\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  .drag-container {\r\n    margin: 20px;\r\n  }\r\n\r\n  @media screen and (max-width: 900px) {\r\n    display: block;\r\n  }\r\n`;\r\n","import { useEffect, useState, useContext } from \"react\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { useHttp } from \"../../hooks/httpHook\";\r\n\r\nimport TaskColumn from \"./TaskColumn\";\r\nimport { Task } from \"./TaskColumn\";\r\nimport { ListContainer } from \"./task-list.styles\";\r\n\r\nconst TasksList: React.FC = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n  const { sendRequest } = useHttp();\r\n\r\n  const updateStatus = async (status: string, id: string, time: number = 0) => {\r\n    try {\r\n      const responseData = await sendRequest(\r\n        `${process.env.BACKEND_URI}/tasks`,\r\n        \"PUT\",\r\n        {\r\n          Authorization: `Bearer ${auth.user.token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        JSON.stringify({ status, id, time })\r\n      );\r\n      setTasks(responseData.list);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const sendTask = async (task: { status: string; text: string }) => {\r\n    try {\r\n      const responseData = await sendRequest(\r\n        `${process.env.BACKEND_URI}/tasks`,\r\n        \"POST\",\r\n        {\r\n          Authorization: `Bearer ${auth.user.token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        JSON.stringify(task)\r\n      );\r\n      setTasks(responseData.list);\r\n    } catch (e) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.BACKEND_URI}/tasks`,\r\n          \"GET\",\r\n          { Authorization: `Bearer ${auth.user.token}` }\r\n        );\r\n        setTasks(responseData.list);\r\n      } catch (e) {}\r\n    };\r\n\r\n    fetchTasks();\r\n  }, [sendRequest, auth.user.token]);\r\n\r\n  return (\r\n    <ListContainer>\r\n      <TaskColumn\r\n        updateStatus={updateStatus}\r\n        sendTask={sendTask}\r\n        title={\"ToDo\"}\r\n        tasks={tasks.filter((task: Task) => task.status === \"todo\")}\r\n      />\r\n      <TaskColumn\r\n        updateStatus={updateStatus}\r\n        sendTask={sendTask}\r\n        title={\"Progress\"}\r\n        tasks={tasks.filter((task: Task) => task.status === \"progress\")}\r\n      />\r\n      <TaskColumn\r\n        updateStatus={updateStatus}\r\n        sendTask={sendTask}\r\n        title={\"Done\"}\r\n        tasks={tasks.filter((task: Task) => task.status === \"done\")}\r\n      />\r\n    </ListContainer>\r\n  );\r\n};\r\n\r\nexport default TasksList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const LoginContainer = styled.form`\r\n  margin: 5vh;\r\n  position: absolute;\r\n  top: 40%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 30%;\r\n  max-width: 900px;\r\n  padding: 20px 30px;\r\n  border-radius: 10px;\r\n  background-color: rgba(255, 255, 255, 0.4);\r\n  box-shadow: 0 10px 10px 10px rgba(0, 0, 0, 0.2);\r\n  font-family: Montserrat;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  h3 {\r\n    margin: 0 1em;\r\n    font-weight: 600;\r\n  }\r\n\r\n  a {\r\n    color: white;\r\n    font-size: 0.8rem;\r\n    text-align: center;\r\n  }\r\n\r\n  button {\r\n    margin-top: 1rem;\r\n    cursor: pointer;\r\n    font-size: 1rem;\r\n    border: none;\r\n    border-radius: 10px;\r\n    color: white;\r\n    background: #333;\r\n    outline: none;\r\n    padding: 0.7rem 1.8rem;\r\n    box-shadow: 0 0.3rem rgba(121, 121, 121, 0.65);\r\n  }\r\n\r\n  button:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  button:active {\r\n    transform: translate(0, 0.3rem);\r\n    box-shadow: 0 0.1rem rgba(255, 255, 255, 0.65);\r\n  }\r\n\r\n  form p:last-of-type {\r\n    margin: -10px 0 10px 16px;\r\n  }\r\n`;\r\n\r\nexport const FormControl = styled.div`\r\n  margin: 1em;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & label {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  & input {\r\n    border: none;\r\n    outline: none;\r\n    line-height: 1.5rem;\r\n    font-size: 1.3rem;\r\n    background-color: rgba(255, 255, 255, 0.4);\r\n    box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.2);\r\n    font-family: Montserrat;\r\n  }\r\n`;\r\n","import { useState, useContext } from \"react\";\r\nimport { useHttp } from \"../../hooks/httpHook\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FormControl, LoginContainer } from \"./login.styles\";\r\n\r\nconst Login: React.FC = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, sendRequest } = useHttp();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      const responseData = await sendRequest(\r\n        `${process.env.BACKEND_URI}/user/login`,\r\n        \"POST\",\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        JSON.stringify({\r\n          email,\r\n          password,\r\n        })\r\n      );\r\n      auth.login(responseData);\r\n    } catch (e) {}\r\n  };\r\n\r\n  return (\r\n    <LoginContainer onSubmit={onSubmit}>\r\n      <h3>Login</h3>\r\n      <FormControl>\r\n        <label>Email</label>\r\n        <input type=\"text\" onChange={(e) => setEmail(e.target.value)} />\r\n      </FormControl>\r\n      <FormControl>\r\n        <label>Password</label>\r\n        <input type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n      </FormControl>\r\n      <Link to={\"/register\"}>I don't have an account</Link>\r\n      {isLoading ? <p>Loading</p> : <button>Login</button>}\r\n    </LoginContainer>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useState, useContext } from \"react\";\r\nimport { useHttp } from \"../../hooks/httpHook\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FormControl, LoginContainer } from \"./login.styles\";\r\n\r\nconst Register: React.FC = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest } = useHttp();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      const responseData = await sendRequest(\r\n        `${process.env.BACKEND_URI}/user/registration`,\r\n        \"POST\",\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        JSON.stringify({\r\n          email,\r\n          password,\r\n          name,\r\n        })\r\n      );\r\n      auth.login(responseData);\r\n    } catch (e) {}\r\n  };\r\n\r\n  return (\r\n    <LoginContainer onSubmit={onSubmit}>\r\n      <h3>Registration</h3>\r\n      <FormControl>\r\n        <label>Email</label>\r\n        <input type=\"text\" onChange={(e) => setEmail(e.target.value)} />\r\n      </FormControl>\r\n      <FormControl>\r\n        <label>Name</label>\r\n        <input type=\"text\" onChange={(e) => setName(e.target.value)} />\r\n      </FormControl>\r\n      <FormControl>\r\n        <label>Password</label>\r\n        <input type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n      </FormControl>\r\n      <Link to={\"login\"}>I already have an account</Link>\r\n      {error && <p>{error}</p>}\r\n      {isLoading ? <p>Loading</p> : <button>Registration</button>}\r\n    </LoginContainer>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport { AuthContext } from \"./context/AuthContext\";\nimport { useAuth } from \"./hooks/useAuth\";\nimport TasksList from \"./tasks/kanban-board/TasksList\";\n\nimport Login from \"./user/components/Login\";\nimport Register from \"./user/components/Register\";\n\nconst App: React.FC = () => {\n  const { isLogged, login, logout, user } = useAuth();\n  let routes;\n  if (isLogged) {\n    routes = (\n      <Switch>\n        <Route path={\"/\"} exact={true} component={TasksList} />\n        <Redirect to={\"/\"} />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path={\"/login\"} component={Login} />\n        <Route path={\"/register\"} component={Register} />\n        <Redirect to={\"/login\"} />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={{ isLogged, login, logout, user }}>\n      <Router>{routes}</Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}